;; widgets
(defvar mute_reveal false)
(defvar volume_reveal false)
(defvar battery_reveal false)

(defwidget sysprogress_bat [] (sysprogress
    :css "battery ${battery.state}"
    :tip "Battery ${battery.percent}%"
    :data {battery.percent}
    :icon {battery.icon}))

(defwidget controls_slider [control reveal value onchange icon orientation transition] (eventbox
    :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        (revealer
            :transition transition
            :duration "300ms"
            :reveal reveal
            :class "reveal"
            (eventbox :class "slider ${orientation}" (scale
                :orientation orientation
                :flipped {orientation == "v"}
                :value value
                :onchange onchange)))
        (label
            :class "${control} icon"
            :text icon)
    )
))

(defwidget controls_icon [control reveal value icon style angle orientation transition visible] (eventbox
    :visible visible
    :onhover "${EWW_CMD} update ${control}_reveal=true"
    :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
    (box
        :space-evenly false
        :orientation orientation
        (revealer
            :transition transition
            :duration "300ms"
            :reveal reveal
            :class "reveal"
            (label
                :class "${style} ${control}"
                :angle angle
                :text value)
        )
        (label
            :class "${style} ${control} icon"
            :text icon)
    )
))

(defwidget panel_controls [orientation] (box
    :class "controls"
    :orientation orientation
    :space-evenly false
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "mute"
        :reveal mute_reveal
        :visible {volume.mute.state == "on"}
        :value "Muted"
        :icon {volume.mute.icon}
        :style ""
        :angle {orientation == "v" ? 90 : 0})
    (controls_slider
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "volume"
        :reveal volume_reveal
        :value {volume.level}
        :onchange "${EWW_CONFIG_DIR}/scripts/volume set {}"
        :icon {volume.icon})
    (controls_icon
        :orientation orientation
        :transition {orientation == "v" ? "slideup" : "slideleft"}
        :control "battery"
        :reveal battery_reveal
        :visible {battery.availabe}
        :value {battery.percent}
        :icon {battery.icon}
        :style {battery.state}
        :angle 0)
))

(defwidget panel_system_indicators [orientation] (box :class "button-bin"
    (eventbox
        :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu quicksettings"
        :class "button system-indicators"
        (panel_controls :orientation orientation)
    )
))

(defwidget panel_workspaces [orientation] (box :class "button-bin"
    (eventbox :class "button workspaces"
        (box
            :space-evenly false
            :orientation orientation
            (for workspace in {workspaces.workspaces}
                (button
                    :class "workspace-btn ${workspace.id == workspaces.active ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    :valign "center"
                    (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == workspaces.active ? "󰮯" : "󰊠"}" : "󰑊"})
                )
            )
        )
    )
))

(defwidget panel_separator [orientation dots visible] (box
    :orientation orientation
    :class "separator"
    :space-evenly false
    :visible visible
    (for dot in dots
        (box :class "dot" :halign "center" :hexpand true :valign "center"))))

(defwidget panel_clock [] (box :class "button-bin"
    (button
        :class "button clock"
        (box
            :space-evenly false
            :orientation "v"
            (label :text hour :class "clock")
            (panel_separator :orientation "h" :dots "[1, 2]" :visible true)
            (label :text minutes :class "minutes")
        )
    )
))

(defwidget tray []
(box :class "tray"
	(systray :pack-direction "ttb"))
)

(defwidget bar [] (centerbox
    :orientation "v"
    :class "vpanel"
    (box
        :class "leftBar"
        :space-evenly false
        :valign "start"
        :orientation "v"
				(panel_workspaces :orientation "v")
    )
    (box
        :class "centerBar"
        :orientation "v"
        :space-evenly false
				(panel_clock)
   )
    (box
        :class "rightBar"
        :space-evenly false
        :valign "end"
        :orientation "v"
				(tray)
				(panel_system_indicators :orientation "v")
    )
))
